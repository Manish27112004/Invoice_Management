

from flask import Flask, render_template, request, redirect, url_for, session
import sqlite3

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Change this to a secure secret key

# Function to create a connection to the database
def get_db_connection():
    conn = sqlite3.connect('invoices.db')
    conn.row_factory = sqlite3.Row
    return conn

# Function to create the database tables
def create_tables():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS invoices
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       customer_name TEXT,
                       total_amount REAL)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS invoice_items
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       invoice_id INTEGER,
                       item_name TEXT,
                       quantity INTEGER,
                       amount REAL)''')
    conn.commit()
    conn.close()

create_tables()

# Main home page with links to different functionalities
@app.route('/')
def home():
    if 'username' in session:
        return render_template('home.html')
    else:
        return redirect(url_for('login'))

# Route for login page
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''SELECT * FROM employees WHERE username = ? AND password = ?''', (username, password))
        employee = cursor.fetchone()
        conn.close()
        
        if employee:
            session['username'] = username
            return redirect(url_for('home'))
        else:
            return render_template('login.html', error='Invalid username or password')
    
    return render_template('login.html')

# Route to create a new invoice
@app.route('/create_invoice', methods=['GET', 'POST'])
def create_invoice():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        customer_name = request.form['customer_name']
        item_names = request.form.getlist('item_name')
        quantities = request.form.getlist('quantity')
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO invoices (customer_name, total_amount)
                          VALUES (?, ?)''', (customer_name, 0))
        invoice_id = cursor.lastrowid
        
        total_amount = 0
        
        for item_name, quantity in zip(item_names, quantities):
            amount = get_item_price(item_name) * int(quantity)
            total_amount += amount
            cursor.execute('''INSERT INTO invoice_items (invoice_id, item_name, quantity, amount)
                              VALUES (?, ?, ?, ?)''', (invoice_id, item_name, quantity, amount))
        
        cursor.execute('''UPDATE invoices SET total_amount = ? WHERE id = ?''', (total_amount, invoice_id))
        
        conn.commit()
        conn.close()
        
        return redirect(url_for('view_invoice', invoice_id=invoice_id))
    
    return render_template('create_invoice.html')

# Route to view a specific invoice
@app.route('/view_invoice/<int:invoice_id>')
def view_invoice(invoice_id):
    if 'username' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM invoices WHERE id = ?''', (invoice_id,))
    invoice = cursor.fetchone()
    
    if not invoice:
        return 'Invoice not found', 404
    
    cursor.execute('''SELECT * FROM invoice_items WHERE invoice_id = ?''', (invoice_id,))
    items = cursor.fetchall()
    
    conn.close()
    
    return render_template('view_invoice.html', invoice=invoice, items=items)

# Route to view all invoices
@app.route('/view_invoices')
def view_invoices():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM invoices''')
    invoices = cursor.fetchall()
    conn.close()
    
    return render_template('view_invoices.html', invoices=invoices)

# Main route to generate a report on all sales
@app.route('/generate_report')
def generate_report():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''SELECT SUM(total_amount) AS total_sales FROM invoices''')
    total_sales = cursor.fetchone()['total_sales']
    conn.close()
    
    return render_template('generate_report.html', total_sales=total_sales)

# Function to get the price of an item (replace this with your own item pricing logic)
def get_item_price(item_name):
    item_prices = {
        'Smoodh': 10,
        'Amul_Lassi': 25,
        'Lays': 10,
        'Snikers':10,
        'Perk':5,
    }
    return item_prices.get(item_name, 0)

if __name__ == '__main__':
    app.run(debug=True)
